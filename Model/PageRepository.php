<?php

namespace WH\CmsBundle\Model;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;

use Doctrine\ORM\EntityRepository;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends NestedTreeRepository
{


    public function findForMenu($search = array()) {

        $qb = $this
            ->createQueryBuilder('a')
            ->select('a')
            ->leftjoin('a.menus', 'Menu')
            ->andWhere('a.status = :status')
            ->orderBy('a.lft', 'asc')
            ->setParameter('status', 'published')
        ;


        //On y ajoute les conditions :
        foreach($search as $k => $v) {

            switch($k) {

                case 'Menu.slug' :

                    $qb->andWhere('menu.slug = :MenuSlug');
                    $qb->setParameter('MenuSlug', $v);

                    break;

                case 'menuPages' :

                    $qb->innerJoin('a.template', 'template', 'WITH', 'a.template = template.id');
                    $qb->andWhere('a.lft >=' . $v->getLft());
                    $qb->andWhere('a.rgt <=' . $v->getRgt());

                    break;

            }

        }


        $res = $qb->getQuery();

        //$res->useQueryCache(true);    // here
        //$res->useResultCache(true);  // and here
        //$res->setResultCacheLifetime(5);


        return $res->getResult();




    }

    public function getMenu() {

        return $this->getMenuQuery()->getResult();

    }

    public function getMenuQuery() {


        $qb = $this
            ->createQueryBuilder('a')
            ->select('a')
            ->leftJoin('a.template', 'Tplt')
            ->addSelect('Tplt')
            ->orderBy('a.root, a.lft', 'ASC')
            ->getQuery()
        ;

        return $qb;

    }


    public function findOneByTemplate($TpltSlug, $admin = false) {

        $qb = $this
            ->createQueryBuilder('a')
            ->select('a')
            ->leftjoin('a.template', 't')
            ->andWhere('t.slug = :tpltSlug')
            ->setParameter('tpltSlug', $TpltSlug)
        ;

        if(!$admin) {

            $qb->andWhere('a.status = :status');
            $qb->setParameter('status', 'published');

        }

        $res = $qb->getQuery();

        return $res->getOneOrNullResult();

    }

    public function queryByTemplate($TpltSlug, $admin = false) {

        $qb = $this
            ->createQueryBuilder('a')
            ->select('a')
            ->leftjoin('a.template', 't')

            ->andWhere('t.slug = :tpltSlug')
            ->orderBy('a.lft', 'ASC')

            ->setParameter('tpltSlug', $TpltSlug)

        ;

        if(!$admin) {
            $qb
                ->andWhere('a.status = :status')
                ->setParameter('status', 'published');
        }

        return $qb;

    }


    public function findByTemplate($TpltSlug, $admin = false) {

        $qb = $this->queryByTemplate($TpltSlug, $admin);

        $res = $qb->getQuery();

        return $res->getResult();

    }

    public function get($all = true, $options = array())
    {

        $qb = $this
            ->createQueryBuilder('page')
            ->select('page')
            ->where('page.status = :status')
            ->orderBy('page.root, page.lft', 'ASC')
            ->setParameter('status', 'published');
        ;

        foreach ($options as $key => $value)
        {

            switch($key)
            {

                case 'template':
                    $qb->andWhere('Template.slug = :templateSlug');
                    $qb->setParameter('templateSlug', $value);
                    break;

                case 'parent':
                    $qb->andWhere('page.parent = :parentPageId');
                    $qb->setParameter('parentPageId', $value);
                    break;

                case 'rubrique' :

                    $qb->innerJoin('page.Template', 'template', 'WITH', 'page.Template = template.id');
                    $qb->andWhere('template.slug = :templateSlug');
                    $qb->setParameter('templateSlug', 'rubrique');
                    $qb->andWhere('page.lft > :lft');
                    $qb->andWhere('page.rgt < :rgt');
                    $qb->setParameter('lft', $value->getLft());
                    $qb->setParameter('rgt', $value->getRgt());

                    break;

                case 'sousRubrique' :

                    $qb->innerJoin('page.Template', 'template', 'WITH', 'page.Template = template.id');
                    $qb->andWhere('template.slug = :templateSlug');
                    $qb->setParameter('templateSlug', 'rubrique');
                    $qb->andWhere('page.parent = :parent');
                    $qb->setParameter('parent', $value->getId());

                    break;

                case 'categoryCode':
                    $qb->andWhere('page.categoryCode = :categoryCode');
                    $qb->setParameter('categoryCode', $value);
                    break;

            }

        }

        $query = $qb->getQuery();

        if ($all) {

            $result = $query->getResult();

        } else {

            $result = $query->getOneOrNullResult();
        }

        return $result;

    }

}
