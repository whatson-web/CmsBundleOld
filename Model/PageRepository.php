<?php

namespace WH\CmsBundle\Model;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;

use Doctrine\ORM\EntityRepository;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends NestedTreeRepository
{


    public function findForMenu($search = array()) {

        $qb = $this
            ->createQueryBuilder('a')
            ->select('a')
            ->leftjoin('a.menus', 'Menu')
            ->andWhere('a.status = :status')
            ->orderBy('a.lft', 'asc')
            ->setParameter('status', 'published')
        ;


        //On y ajoute les conditions :
        foreach($search as $k => $v) {

            switch($k) {

                case 'Menu.slug' :

                    $qb->andWhere('menu.slug = :MenuSlug');
                    $qb->setParameter('MenuSlug', $v);

                    break;

                case 'menuPages' :

                    $qb->innerJoin('a.template', 'template', 'WITH', 'a.template = template.id');
                    $qb->andWhere('a.lft >=' . $v->getLft());
                    $qb->andWhere('a.rgt <=' . $v->getRgt());

                    break;

            }

        }


        $res = $qb->getQuery();

        //$res->useQueryCache(true);    // here
        //$res->useResultCache(true);  // and here
        //$res->setResultCacheLifetime(5);


        return $res->getResult();




    }

    public function getMenu() {

        return $this->getMenuQuery()->getResult();

    }

    public function getMenuQuery() {


        $qb = $this
            ->createQueryBuilder('a')
            ->select('a')
            ->leftJoin('a.template', 'Tplt')
            ->addSelect('Tplt')
            ->orderBy('a.root, a.lft', 'ASC')
            ->getQuery()
        ;

        return $qb;

    }


    public function findOneByTemplate($TpltSlug, $admin = false) {

        $qb = $this
            ->createQueryBuilder('a')
            ->select('a')
            ->leftjoin('a.template', 't')
            ->andWhere('t.slug = :tpltSlug')
            ->setParameter('tpltSlug', $TpltSlug)
        ;

        if(!$admin) {

            $qb->andWhere('a.status = :status');
            $qb->setParameter('status', 'published');

        }

        $res = $qb->getQuery();

        return $res->getOneOrNullResult();

    }

    public function queryByTemplate($TpltSlug, $admin = false) {

        $qb = $this
            ->createQueryBuilder('a')
            ->select('a')
            ->leftjoin('a.template', 't')

            ->andWhere('t.slug = :tpltSlug')
            ->orderBy('a.lft', 'ASC')

            ->setParameter('tpltSlug', $TpltSlug)

        ;

        if(!$admin) {
            $qb
                ->andWhere('a.status = :status')
                ->setParameter('status', 'published');
        }

        return $qb;

    }


    public function findByTemplate($TpltSlug, $admin = false) {

        $qb = $this->queryByTemplate($TpltSlug, $admin);

        $res = $qb->getQuery();

        return $res->getResult();

    }

    public function _getQuery()
    {

        return $this
            ->createQueryBuilder('Page')
            ->leftJoin('Page.template', 'Template')
            ->leftJoin('Page.parent', 'Parent')
            ;

    }

    public function get($type = 'all', $options = array(), $admin = false)
    {


        $qb = $this->_getQuery();

        if (!$admin) {

            $qb->andWhere('Page.status = :status');
            $qb->setParameter('status', 'published');
        }


        foreach ($options as $key => $value) {

            switch ($key) {

                case 'limit':
                    $qb->setMaxResults($value);
                    break;

                case 'order':
                    $qb->orderBy('Page.created', $value);
                    break;


                case 'conditions':

                    foreach($value as $k => $v) {

                        if(empty($v)) continue;

                        switch($k) {

                            case 'Search' :

                                $qb->orWhere('Page.body LIKE :search');
                                $qb->orWhere('Page.name LIKE :search');
                                $qb->orWhere('Page.title LIKE :search');
                                $qb->setParameter('search', '%'.$v.'%');

                                break;


                            default :

                                $cond = preg_replace('#\.#', '', $k);
                                $cond = strtolower($cond);


                                $qb->andWhere($k. ' = :'.$cond);
                                $qb->setParameter($cond, $v);

                                break;


                        }



                    }




            }

        }


        switch ($type) {

            case 'query':

                return $qb;

                break;

            case 'all':

                $qb->addSelect('Page')
                    ->addSelect('Template')
                    ->addSelect('Parent')
                    ;

                return $qb->getQuery()->getResult();

                break;

            case 'one':

                $qb->addSelect('Page')
                    ->addSelect('Template')
                    ->addSelect('Parent')
                    ;

                return $qb->getQuery()->getOneOrNullResult();

                break;

            case 'paginate':


                $qb->addSelect('Page')
                    ->addSelect('Template')
                    ->addSelect('Parent')
                    ->getQuery();


                if (!empty($typeOptions['page'])) {

                    $qb->setFirstResult(($typeOptions['page'] - 1) * $typeOptions['limit']);
                }

                if (!empty($typeOptions['limit'])) {

                    $qb->setMaxResults($typeOptions['limit']);
                }

                return new Paginator($qb, true);

                break;

        }

        return false;

    }

}
